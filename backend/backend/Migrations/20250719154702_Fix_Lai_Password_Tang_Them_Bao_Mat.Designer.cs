// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250719154702_Fix_Lai_Password_Tang_Them_Bao_Mat")]
    partial class Fix_Lai_Password_Tang_Them_Bao_Mat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("roleId");

                    b.HasIndex("roleName")
                        .IsUnique();

                    b.ToTable("roleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "2b9c8d0e-f5a6-7b8c-d9e0-1f2a3b4c5d6e",
                            roleName = "Customer"
                        },
                        new
                        {
                            roleId = "1a8f7b9c-d4e5-4f6a-b7c8-9d0e1f2a3b4c",
                            roleName = "Cashier"
                        },
                        new
                        {
                            roleId = "3c0d9e1f-a6b7-c8d9-e0f1-2a3b4c5d6e7f",
                            roleName = "Director"
                        },
                        new
                        {
                            roleId = "4d1e0f2a-b7c8-d9e0-f1a2-3b4c5d6e7f8g",
                            roleName = "MovieManager"
                        },
                        new
                        {
                            roleId = "5e2f1a3b-c8d9-e0f1-a2b3-4c5d6e7f8g9h",
                            roleName = "TheaterManager"
                        },
                        new
                        {
                            roleId = "6f3a2b4c-d9e0-f1a2-b3c4-d5e6f7a8b9c0",
                            roleName = "FacilitiesManager"
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("loginUserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("loginUserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("userId");

                    b.HasIndex("loginUserEmail")
                        .IsUnique();

                    b.ToTable("userInformation");

                    b.HasData(
                        new
                        {
                            userId = "a1b2c3d4-e5f6-7a8b-c9d0-e1f2a3b4c5d6",
                            loginUserEmail = "admin@example.com",
                            loginUserPassword = "$2a$12$hZw7TwWKR/cR2WRRn/Q1guTjMqLH6dYcchlw4sAimSU41bJ42r3Ka"
                        },
                        new
                        {
                            userId = "b2c3d4e5-f6a7-8b9c-d0e1-f2a3b4c5d6e7",
                            loginUserEmail = "user@example.com",
                            loginUserPassword = "$2a$12$ADqBiSquthm1g7bLZvg6UulJ5QJFQQ6olUQzf66AQfJDGbQ2W1wlG"
                        });
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.Property<string>("roleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("roleId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("userRoleInformation");

                    b.HasData(
                        new
                        {
                            roleId = "4d1e0f2a-b7c8-d9e0-f1a2-3b4c5d6e7f8g",
                            userId = "a1b2c3d4-e5f6-7a8b-c9d0-e1f2a3b4c5d6"
                        },
                        new
                        {
                            roleId = "2b9c8d0e-f5a6-7b8c-d9e0-1f2a3b4c5d6e",
                            userId = "b2c3d4e5-f6a7-8b9c-d0e1-f2a3b4c5d6e7"
                        });
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerID")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("paymentRequestCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("totalAmount")
                        .HasColumnType("bigint");

                    b.HasKey("orderId");

                    b.HasIndex("customerID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quanlity")
                        .HasColumnType("int");

                    b.HasKey("orderId", "foodInformationId");

                    b.HasIndex("foodInformationId");

                    b.ToTable("FoodOrderDetail");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieScheduleID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("orderId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("seatsId", "movieScheduleID", "orderId");

                    b.HasIndex("movieScheduleID");

                    b.HasIndex("orderId");

                    b.ToTable("TicketOrderDetail");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.Property<string>("seatsId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("isTaken")
                        .HasColumnType("bit");

                    b.Property<string>("seatsNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("seatsId");

                    b.HasIndex("cinemaRoomId");

                    b.HasIndex("seatsId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            seatsId = "8f9a0b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c",
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "A1"
                        },
                        new
                        {
                            seatsId = "9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d",
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "A2"
                        },
                        new
                        {
                            seatsId = "a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d",
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "A3"
                        },
                        new
                        {
                            seatsId = "b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e",
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "A4"
                        },
                        new
                        {
                            seatsId = "c3d4e5f6-a7b8-9c0d-1e2f-3a4b5c6d7e8f",
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "A5"
                        },
                        new
                        {
                            seatsId = "d4e5f6a7-b8c9-0d1e-2f3a-4b5c6d7e8f9a",
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "A6"
                        },
                        new
                        {
                            seatsId = "e5f6a7b8-c9d0-1e2f-3a4b-5c6d7e8f9a0b",
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "A7"
                        },
                        new
                        {
                            seatsId = "f6a7b8c9-d0e1-2f3a-4b5c-6d7e8f9a0b1c",
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "A8"
                        },
                        new
                        {
                            seatsId = "11111111-2d3e-4f5a-6b7c-8d9e0f1a2b3c",
                            cinemaRoomId = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "B1"
                        },
                        new
                        {
                            seatsId = "22222222-3e4f-5a6b-7c8d-9e0f1a2b3c4d",
                            cinemaRoomId = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "B2"
                        },
                        new
                        {
                            seatsId = "33333333-4f5a-6b7c-8d9e-0f1a2b3c4d5e",
                            cinemaRoomId = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "B3"
                        },
                        new
                        {
                            seatsId = "44444444-5a6b-7c8d-9e0f-1a2b3c4d5e6f",
                            cinemaRoomId = "8f9a0b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "C1"
                        },
                        new
                        {
                            seatsId = "55555555-6b7c-8d9e-0f1a-2b3c4d5e6f7a",
                            cinemaRoomId = "8f9a0b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "C2"
                        },
                        new
                        {
                            seatsId = "66666666-7c8d-9e0f-1a2b-3c4d5e6f7a8b",
                            cinemaRoomId = "9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "D1"
                        },
                        new
                        {
                            seatsId = "77777777-8d9e-0f1a-2b3c-4d5e6f7a8b9c",
                            cinemaRoomId = "9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d",
                            isDelete = false,
                            isTaken = false,
                            seatsNumber = "D2"
                        });
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Property<string>("cinemaRoomId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("cinemaRoomNumber")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("movieVisualFormatID")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("cinemaRoomId");

                    b.HasIndex("cinemaId");

                    b.HasIndex("movieVisualFormatID");

                    b.ToTable("cinemaRoom");

                    b.HasData(
                        new
                        {
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            cinemaId = "2f3a4b5c-6d7e-8f9a-0b1c-2d3e4f5a6b7c",
                            cinemaRoomNumber = 1,
                            isDeleted = false,
                            movieVisualFormatID = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f"
                        },
                        new
                        {
                            cinemaRoomId = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b",
                            cinemaId = "2f3a4b5c-6d7e-8f9a-0b1c-2d3e4f5a6b7c",
                            cinemaRoomNumber = 2,
                            isDeleted = false,
                            movieVisualFormatID = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a"
                        },
                        new
                        {
                            cinemaRoomId = "8f9a0b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c",
                            cinemaId = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f",
                            cinemaRoomNumber = 1,
                            isDeleted = false,
                            movieVisualFormatID = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f"
                        },
                        new
                        {
                            cinemaRoomId = "9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d",
                            cinemaId = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f",
                            cinemaRoomNumber = 2,
                            isDeleted = false,
                            movieVisualFormatID = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b"
                        });
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Property<string>("cinemaId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("cinemaContactHotlineNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("cinemaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cinemaLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("cinemaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("cinemaId");

                    b.ToTable("Cinema");

                    b.HasData(
                        new
                        {
                            cinemaId = "2f3a4b5c-6d7e-8f9a-0b1c-2d3e4f5a6b7c",
                            cinemaContactHotlineNumber = "0901234567",
                            cinemaDescription = "Rạp chiếu phim hiện đại với nhiều phòng chiếu.",
                            cinemaLocation = "123 Đường XYZ, TP.HCM",
                            cinemaName = "Rạp Chiếu Phim ABC"
                        },
                        new
                        {
                            cinemaId = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f",
                            cinemaContactHotlineNumber = "0987654321",
                            cinemaDescription = "Không gian ấm cúng, chất lượng hàng đầu.",
                            cinemaLocation = "456 Đường UVW, Hà Nội",
                            cinemaName = "Rạp Chiếu Phim LMN"
                        });
                });

            modelBuilder.Entity("backend.Model.MinimumAge.minimumAge", b =>
                {
                    b.Property<string>("minimumAgeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("minimumAgeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("minimumAgeInfo")
                        .HasColumnType("int");

                    b.HasKey("minimumAgeID");

                    b.HasIndex("minimumAgeDescription")
                        .IsUnique();

                    b.HasIndex("minimumAgeInfo")
                        .IsUnique();

                    b.ToTable("minimumAges");

                    b.HasData(
                        new
                        {
                            minimumAgeID = "6a7b8c9d-0e1f-2a3b-4c5d-6e7f8a9b0c1d",
                            minimumAgeDescription = "Phim phù hợp với mọi lứa tuổi.",
                            minimumAgeInfo = 0
                        },
                        new
                        {
                            minimumAgeID = "7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d",
                            minimumAgeDescription = "Phim dành cho khán giả từ 13 tuổi trở lên.",
                            minimumAgeInfo = 13
                        },
                        new
                        {
                            minimumAgeID = "8b9c0d1e-2f3a-4b5c-6d7e-8f9a0b1c2d3e",
                            minimumAgeDescription = "Phim dành cho khán giả từ 16 tuổi trở lên.",
                            minimumAgeInfo = 16
                        },
                        new
                        {
                            minimumAgeID = "9c0d1e2f-3a4b-5c6d-7e8f-9a0b1c2d3e4f",
                            minimumAgeDescription = "Phim dành cho khán giả từ 18 tuổi trở lên.",
                            minimumAgeInfo = 18
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Property<string>("languageId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("languageDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("languageId");

                    b.HasIndex("languageDetail")
                        .IsUnique();

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            languageId = "c3d4e5f6-a7b8-c9d0-e1f2-a3b4c5d6e7f8",
                            languageDetail = "Vietnamese"
                        },
                        new
                        {
                            languageId = "d4e5f6a7-b8c9-d0e1-f2a3-b4c5d6e7f8a9",
                            languageDetail = "English"
                        },
                        new
                        {
                            languageId = "11d4e5f6-a7b8-c9d0-e1f2-a3b4c5d6e711",
                            languageDetail = "Korean"
                        },
                        new
                        {
                            languageId = "22d4e5f6-a7b8-c9d0-e1f2-a3b4c5d6e722",
                            languageDetail = "Japanese"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.Property<string>("commentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createdCommentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("customerID")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userCommentDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("commentID");

                    b.HasIndex("customerID");

                    b.HasIndex("movieId");

                    b.ToTable("movieCommentDetail");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenre", b =>
                {
                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("movieGenreId");

                    b.HasIndex("movieGenreName")
                        .IsUnique();

                    b.ToTable("movieGenre");

                    b.HasData(
                        new
                        {
                            movieGenreId = "e5f6a7b8-c9d0-e1f2-a3b4-c5d6e7f8a9b0",
                            movieGenreName = "Action"
                        },
                        new
                        {
                            movieGenreId = "f6a7b8c9-d0e1-f2a3-b4c5-d6e7f8a9b0c1",
                            movieGenreName = "Comedy"
                        },
                        new
                        {
                            movieGenreId = "a1a7b8c9-d0e1-f2a3-b4c5-d6e7f8a9b0c2",
                            movieGenreName = "Horror"
                        },
                        new
                        {
                            movieGenreId = "b2b7b8c9-d0e1-f2a3-b4c5-d6e7f8a9b0c3",
                            movieGenreName = "Sci-Fi"
                        },
                        new
                        {
                            movieGenreId = "c3c7b8c9-d0e1-f2a3-b4c5-d6e7f8a9b0c4",
                            movieGenreName = "Romance"
                        },
                        new
                        {
                            movieGenreId = "d4d7b8c9-d0e1-f2a3-b4c5-d6e7f8a9b0c5",
                            movieGenreName = "Animation"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieGenreId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId", "movieGenreId");

                    b.HasIndex("movieGenreId");

                    b.ToTable("movieGenreInformation");

                    b.HasData(
                        new
                        {
                            movieId = "0d1e2f3a-4b5c-6d7e-8f9a-0b1c2d3e4f5a",
                            movieGenreId = "e5f6a7b8-c9d0-e1f2-a3b4-c5d6e7f8a9b0"
                        },
                        new
                        {
                            movieId = "1e2f3a4b-5c6d-7e8f-9a0b-1c2d3e4f5a6b",
                            movieGenreId = "f6a7b8c9-d0e1-f2a3-b4c5-d6e7f8a9b0c1"
                        },
                        new
                        {
                            movieId = "2f3a4b5c-6d7e-8f9a-0b1c2d3e4f5a6b7c",
                            movieGenreId = "a1a7b8c9-d0e1-f2a3-b4c5-d6e7f8a9b0c2"
                        },
                        new
                        {
                            movieId = "3a4b5c6d-7e8f-9a0b-1c2d-3e4f5a6b7c8d",
                            movieGenreId = "b2b7b8c9-d0e1-f2a3-b4c5-d6e7f8a9b0c3"
                        },
                        new
                        {
                            movieId = "3a4b5c6d-7e8f-9a0b-1c2d-3e4f5a6b7c8d",
                            movieGenreId = "e5f6a7b8-c9d0-e1f2-a3b4-c5d6e7f8a9b0"
                        },
                        new
                        {
                            movieId = "4b5c6d7e-8f9a-0b1c-2d3e-4f5a6b7c8d9e",
                            movieGenreId = "d4d7b8c9-d0e1-f2a3-b4c5-d6e7f8a9b0c5"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<string>("languageId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("minimumAgeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("movieActor")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("movieDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("movieDirector")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("movieDuration")
                        .HasColumnType("int");

                    b.Property<string>("movieImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("movieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("movieTrailerUrl")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.HasKey("movieId");

                    b.HasIndex("languageId");

                    b.HasIndex("minimumAgeID");

                    b.HasIndex("movieImage")
                        .IsUnique();

                    b.HasIndex("movieName")
                        .IsUnique();

                    b.HasIndex("movieTrailerUrl")
                        .IsUnique();

                    b.ToTable("movieInformation");

                    b.HasData(
                        new
                        {
                            movieId = "0d1e2f3a-4b5c-6d7e-8f9a-0b1c2d3e4f5a",
                            ReleaseDate = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isDelete = false,
                            languageId = "c3d4e5f6-a7b8-c9d0-e1f2-a3b4c5d6e7f8",
                            minimumAgeID = "7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d",
                            movieActor = "Diễn Viên X, Diễn Viên Y",
                            movieDescription = "Đây là một bộ phim hành động đầy kịch tính.",
                            movieDirector = "Đạo Diễn A",
                            movieDuration = 120,
                            movieImage = "aa.com",
                            movieName = "Phim Hành Động 1",
                            movieTrailerUrl = "http://trailer.com/phimhanhdong1"
                        },
                        new
                        {
                            movieId = "1e2f3a4b-5c6d-7e8f-9a0b-1c2d3e4f5a6b",
                            ReleaseDate = new DateTime(2025, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isDelete = false,
                            languageId = "d4e5f6a7-b8c9-d0e1-f2a3-b4c5d6e7f8a9",
                            minimumAgeID = "9c0d1e2f-3a4b-5c6d-7e8f-9a0b1c2d3e4f",
                            movieActor = "Actor Z, Actress W",
                            movieDescription = "A funny movie for the whole family.",
                            movieDirector = "Director B",
                            movieDuration = 90,
                            movieImage = "aa.com.vn",
                            movieName = "Comedy Film 1",
                            movieTrailerUrl = "http://trailer.com/comedyfilm1"
                        },
                        new
                        {
                            movieId = "2f3a4b5c-6d7e-8f9a-0b1c2d3e4f5a6b7c",
                            ReleaseDate = new DateTime(2013, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isDelete = false,
                            languageId = "d4e5f6a7-b8c9-d0e1-f2a3-b4c5d6e7f8a9",
                            minimumAgeID = "9c0d1e2f-3a4b-5c6d-7e8f-9a0b1c2d3e4f",
                            movieActor = "Vera Farmiga, Patrick Wilson",
                            movieDescription = "Dựa trên một câu chuyện có thật, phim theo chân hai nhà điều tra hiện tượng siêu nhiên.",
                            movieDirector = "James Wan",
                            movieDuration = 112,
                            movieImage = "conjuring.com",
                            movieName = "Ám Ảnh Kinh Hoàng",
                            movieTrailerUrl = "http://trailer.com/conjuring"
                        },
                        new
                        {
                            movieId = "3a4b5c6d-7e8f-9a0b-1c2d-3e4f5a6b7c8d",
                            ReleaseDate = new DateTime(2014, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isDelete = false,
                            languageId = "d4e5f6a7-b8c9-d0e1-f2a3-b4c5d6e7f8a9",
                            minimumAgeID = "7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d",
                            movieActor = "Matthew McConaughey, Anne Hathaway",
                            movieDescription = "Một nhóm các nhà du hành vũ trụ đi qua một hố sâu để tìm một ngôi nhà mới cho nhân loại.",
                            movieDirector = "Christopher Nolan",
                            movieDuration = 169,
                            movieImage = "interstellar.com",
                            movieName = "Hố Đen Du Hành",
                            movieTrailerUrl = "http://trailer.com/interstellar"
                        },
                        new
                        {
                            movieId = "4b5c6d7e-8f9a-0b1c-2d3e-4f5a6b7c8d9e",
                            ReleaseDate = new DateTime(2001, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isDelete = false,
                            languageId = "22d4e5f6-a7b8-c9d0-e1f2-a3b4c5d6e722",
                            minimumAgeID = "6a7b8c9d-0e1f-2a3b-4c5d-6e7f8a9b0c1d",
                            movieActor = "Rumi Hiiragi, Miyu Irino",
                            movieDescription = "Trong lúc chuyển nhà, cô bé Chihiro và gia đình đã lạc vào một thế giới của các vị thần.",
                            movieDirector = "Hayao Miyazaki",
                            movieDuration = 125,
                            movieImage = "spiritedaway.com",
                            movieName = "Vùng Đất Linh Hồn",
                            movieTrailerUrl = "http://trailer.com/spiritedaway"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Property<string>("movieScheduleId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DayInWeekendSchedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HourScheduleID")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("cinemaRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatID")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieScheduleId");

                    b.HasIndex("HourScheduleID");

                    b.HasIndex("movieVisualFormatID");

                    b.HasIndex("cinemaRoomId", "ScheduleDate")
                        .IsUnique();

                    b.HasIndex("cinemaRoomId", "ScheduleDate", "HourScheduleID")
                        .IsUnique();

                    b.HasIndex("movieId", "ScheduleDate", "HourScheduleID")
                        .IsUnique();

                    b.ToTable("movieSchedule");

                    b.HasData(
                        new
                        {
                            movieScheduleId = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b",
                            DayInWeekendSchedule = "Monday",
                            HourScheduleID = "3a4b5c6d-7e8f-9a0b-1c2d-3e4f5a6b7c8d",
                            IsDelete = false,
                            ScheduleDate = new DateTime(2025, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            movieId = "0d1e2f3a-4b5c-6d7e-8f9a-0b1c2d3e4f5a",
                            movieVisualFormatID = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f"
                        },
                        new
                        {
                            movieScheduleId = "8f9a0b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c",
                            DayInWeekendSchedule = "Friday",
                            HourScheduleID = "8f9a0b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c",
                            IsDelete = false,
                            ScheduleDate = new DateTime(2025, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            cinemaRoomId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            movieId = "2f3a4b5c-6d7e-8f9a-0b1c2d3e4f5a6b7c",
                            movieVisualFormatID = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f"
                        },
                        new
                        {
                            movieScheduleId = "9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d",
                            DayInWeekendSchedule = "Saturday",
                            HourScheduleID = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b",
                            IsDelete = false,
                            ScheduleDate = new DateTime(2025, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            cinemaRoomId = "9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d",
                            movieId = "3a4b5c6d-7e8f-9a0b-1c2d-3e4f5a6b7c8d",
                            movieVisualFormatID = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b"
                        },
                        new
                        {
                            movieScheduleId = "a1b2c3d4-e5f6-7a8b-c9d0-e1f2a3b4c5d6",
                            DayInWeekendSchedule = "Sunday",
                            HourScheduleID = "4b5c6d7e-8f9a-0b1c-2d3e-4f5a6b7c8d9e",
                            IsDelete = false,
                            ScheduleDate = new DateTime(2025, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            cinemaRoomId = "8f9a0b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c",
                            movieId = "4b5c6d7e-8f9a-0b1c-2d3e-4f5a6b7c8d9e",
                            movieVisualFormatID = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("movieVisualFormatId");

                    b.HasIndex("movieVisualFormatName")
                        .IsUnique();

                    b.ToTable("movieVisualFormat");

                    b.HasData(
                        new
                        {
                            movieVisualFormatId = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f",
                            movieVisualFormatName = "2D"
                        },
                        new
                        {
                            movieVisualFormatId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            movieVisualFormatName = "3D"
                        },
                        new
                        {
                            movieVisualFormatId = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b",
                            movieVisualFormatName = "IMAX"
                        });
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormatDetail", b =>
                {
                    b.Property<string>("movieId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("movieId", "movieVisualFormatId");

                    b.HasIndex("movieVisualFormatId");

                    b.ToTable("movieVisualFormatDetails");
                });

            modelBuilder.Entity("backend.Model.Price.PriceInformation", b =>
                {
                    b.Property<string>("priceInformationId")
                        .HasColumnType("varchar(100)");

                    b.Property<long>("priceAmount")
                        .HasColumnType("bigint");

                    b.HasKey("priceInformationId");

                    b.HasIndex("priceAmount")
                        .IsUnique();

                    b.ToTable("priceInformation");

                    b.HasData(
                        new
                        {
                            priceInformationId = "0b1c2d3e-4f5a-6b7c-8d9e-0f1a2b3c4d5e",
                            priceAmount = 80000L
                        },
                        new
                        {
                            priceInformationId = "1c2d3e4f-5a6b-7c8d-9e0f-1a2b3c4d5e6f",
                            priceAmount = 120000L
                        },
                        new
                        {
                            priceInformationId = "2d3e4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a",
                            priceAmount = 70000L
                        },
                        new
                        {
                            priceInformationId = "3e4f5a6b-7c8d-9e0f-1a2b-3c4d5e6f7a8b",
                            priceAmount = 60000L
                        });
                });

            modelBuilder.Entity("backend.Model.Price.priceInformationForEachUserFilmType", b =>
                {
                    b.Property<string>("userTypeId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("movieVisualFormatId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("priceInformationID")
                        .HasColumnType("varchar(100)");

                    b.HasKey("userTypeId", "movieVisualFormatId", "priceInformationID");

                    b.HasIndex("movieVisualFormatId");

                    b.HasIndex("priceInformationID");

                    b.ToTable("priceInformationForEachUserFilmType");

                    b.HasData(
                        new
                        {
                            userTypeId = "1c2d3e4f-5a6b-7c8d-9e0f-1a2b3c4d5e6f",
                            movieVisualFormatId = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f",
                            priceInformationID = "0b1c2d3e-4f5a-6b7c-8d9e-0f1a2b3c4d5e"
                        },
                        new
                        {
                            userTypeId = "1c2d3e4f-5a6b-7c8d-9e0f-1a2b3c4d5e6f",
                            movieVisualFormatId = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            priceInformationID = "1c2d3e4f-5a6b-7c8d-9e0f-1a2b3c4d5e6f"
                        },
                        new
                        {
                            userTypeId = "1c2d3e4f-5a6b-7c8d-9e0f-1a2b3c4d5e6f",
                            movieVisualFormatId = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b",
                            priceInformationID = "1c2d3e4f-5a6b-7c8d-9e0f-1a2b3c4d5e6f"
                        },
                        new
                        {
                            userTypeId = "2d3e4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a",
                            movieVisualFormatId = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f",
                            priceInformationID = "3e4f5a6b-7c8d-9e0f-1a2b-3c4d5e6f7a8b"
                        },
                        new
                        {
                            userTypeId = "3e4f5a6b-7c8d-9e0f-1a2b-3c4d5e6f7a8b",
                            movieVisualFormatId = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f",
                            priceInformationID = "2d3e4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a"
                        });
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Property<string>("userTypeId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("userTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("userTypeId");

                    b.HasIndex("userTypeDescription")
                        .IsUnique();

                    b.ToTable("userType");

                    b.HasData(
                        new
                        {
                            userTypeId = "1c2d3e4f-5a6b-7c8d-9e0f-1a2b3c4d5e6f",
                            userTypeDescription = "Adult"
                        },
                        new
                        {
                            userTypeId = "2d3e4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a",
                            userTypeDescription = "Child"
                        },
                        new
                        {
                            userTypeId = "3e4f5a6b-7c8d-9e0f-1a2b-3c4d5e6f7a8b",
                            userTypeDescription = "Student"
                        });
                });

            modelBuilder.Entity("backend.Model.Product.foodInformation", b =>
                {
                    b.Property<string>("foodInformationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("foodInformationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("foodPrice")
                        .HasColumnType("bigint");

                    b.HasKey("foodInformationId");

                    b.ToTable("foodInformation");

                    b.HasData(
                        new
                        {
                            foodInformationId = "2d3e4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a",
                            foodInformationName = "Popcorn",
                            foodPrice = 50000L
                        },
                        new
                        {
                            foodInformationId = "3e4f5a6b-7c8d-9e0f-1a2b-3c4d5e6f7a8b",
                            foodInformationName = "Coca-Cola",
                            foodPrice = 25000L
                        },
                        new
                        {
                            foodInformationId = "4f5a6b7c-8d9e-0f1a-2b3c-4d5e6f7a8b9c",
                            foodInformationName = "Nachos",
                            foodPrice = 65000L
                        },
                        new
                        {
                            foodInformationId = "5a6b7c8d-9e0f-1a2b-3c4d-5e6f7a8b9c0d",
                            foodInformationName = "Hot Dog",
                            foodPrice = 45000L
                        });
                });

            modelBuilder.Entity("backend.Model.ScheduleList.HourSchedule", b =>
                {
                    b.Property<string>("HourScheduleID")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HourScheduleShowTime")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("HourScheduleID");

                    b.HasIndex("HourScheduleShowTime")
                        .IsUnique();

                    b.ToTable("HourSchedule");

                    b.HasData(
                        new
                        {
                            HourScheduleID = "3a4b5c6d-7e8f-9a0b-1c2d-3e4f5a6b7c8d",
                            HourScheduleShowTime = "08:00"
                        },
                        new
                        {
                            HourScheduleID = "4b5c6d7e-8f9a-0b1c-2d3e-4f5a6b7c8d9e",
                            HourScheduleShowTime = "10:00"
                        },
                        new
                        {
                            HourScheduleID = "5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f",
                            HourScheduleShowTime = "14:00"
                        },
                        new
                        {
                            HourScheduleID = "6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a",
                            HourScheduleShowTime = "16:30"
                        },
                        new
                        {
                            HourScheduleID = "7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b",
                            HourScheduleShowTime = "19:00"
                        },
                        new
                        {
                            HourScheduleID = "8f9a0b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c",
                            HourScheduleShowTime = "21:30"
                        });
                });

            modelBuilder.Entity("backend.Model.Staff_Customer.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdentityCode")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "a1b2c3d4-e5f6-7a8b-c9d0-e1f2a3b4c5e1",
                            IdentityCode = "0123456789",
                            Name = "Trần Anh Đức",
                            dateOfBirth = new DateTime(2005, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            phoneNumber = "1234567890",
                            userID = "b2c3d4e5-f6a7-8b9c-d0e1-f2a3b4c5d6e7"
                        });
                });

            modelBuilder.Entity("backend.Model.Staff_Customer.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cinemaID")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("cinemaID");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("backend.Model.Auth.userRoleInformation", b =>
                {
                    b.HasOne("backend.Model.Auth.roleInformation", "roleInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithMany("userRoleInformation")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roleInformation");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.Order", b =>
                {
                    b.HasOne("backend.Model.Staff_Customer.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailFood", b =>
                {
                    b.HasOne("backend.Model.Product.foodInformation", "foodInformation")
                        .WithMany()
                        .HasForeignKey("foodInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("foodInformation");
                });

            modelBuilder.Entity("backend.Model.Booking.orderDetailTicket", b =>
                {
                    b.HasOne("backend.Model.Movie.movieSchedule", "movieSchedule")
                        .WithMany("orderDetailTicket")
                        .HasForeignKey("movieScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Booking.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.CinemaRoom.Seats", "Seats")
                        .WithMany()
                        .HasForeignKey("seatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Seats");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.Seats", b =>
                {
                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("Seats")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany("cinemaRoom")
                        .HasForeignKey("cinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("cinemaRoom")
                        .HasForeignKey("movieVisualFormatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("movieVisualFormat");
                });

            modelBuilder.Entity("backend.Model.Movie.movieCommentDetail", b =>
                {
                    b.HasOne("backend.Model.Staff_Customer.Customer", "Customer")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieCommentDetail")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenreInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.movieGenre", "movieGenre")
                        .WithMany("movieGenreInformation")
                        .HasForeignKey("movieGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieGenreInformation")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieGenre");

                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.HasOne("backend.Model.Movie.Language", "Language")
                        .WithMany("movieInformation")
                        .HasForeignKey("languageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.MinimumAge.minimumAge", "minimumAge")
                        .WithMany("movieInformation")
                        .HasForeignKey("minimumAgeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("minimumAge");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.HasOne("backend.Model.ScheduleList.HourSchedule", "HourSchedule")
                        .WithMany("movieSchedule")
                        .HasForeignKey("HourScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.CinemaRoom.cinemaRoom", "cinemaRoom")
                        .WithMany("movieSchedule")
                        .HasForeignKey("cinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieSchedule")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("movieSchedule")
                        .HasForeignKey("movieVisualFormatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HourSchedule");

                    b.Navigation("cinemaRoom");

                    b.Navigation("movieInformation");

                    b.Navigation("movieVisualFormat");
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormatDetail", b =>
                {
                    b.HasOne("backend.Model.Movie.movieInformation", "movieInformation")
                        .WithMany("movieVisualFormatDetail")
                        .HasForeignKey("movieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("movieVisualFormatDetail")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movieInformation");

                    b.Navigation("movieVisualFormat");
                });

            modelBuilder.Entity("backend.Model.Price.priceInformationForEachUserFilmType", b =>
                {
                    b.HasOne("backend.Model.Movie.movieVisualFormat", "movieVisualFormat")
                        .WithMany("priceInformation")
                        .HasForeignKey("movieVisualFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.PriceInformation", "PriceInformation")
                        .WithMany("priceInformationForEachUserFilmType")
                        .HasForeignKey("priceInformationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Price.userType", "userType")
                        .WithMany("priceInformation")
                        .HasForeignKey("userTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceInformation");

                    b.Navigation("movieVisualFormat");

                    b.Navigation("userType");
                });

            modelBuilder.Entity("backend.Model.Staff_Customer.Customer", b =>
                {
                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithOne("Customer")
                        .HasForeignKey("backend.Model.Staff_Customer.Customer", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Staff_Customer.Staff", b =>
                {
                    b.HasOne("backend.Model.Cinemas.Cinema", "Cinema")
                        .WithMany()
                        .HasForeignKey("cinemaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Model.Auth.userInformation", "userInformation")
                        .WithOne("Staff")
                        .HasForeignKey("backend.Model.Staff_Customer.Staff", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("userInformation");
                });

            modelBuilder.Entity("backend.Model.Auth.roleInformation", b =>
                {
                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.Auth.userInformation", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();

                    b.Navigation("userRoleInformation");
                });

            modelBuilder.Entity("backend.Model.CinemaRoom.cinemaRoom", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.Cinemas.Cinema", b =>
                {
                    b.Navigation("cinemaRoom");
                });

            modelBuilder.Entity("backend.Model.MinimumAge.minimumAge", b =>
                {
                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.Language", b =>
                {
                    b.Navigation("movieInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieGenre", b =>
                {
                    b.Navigation("movieGenreInformation");
                });

            modelBuilder.Entity("backend.Model.Movie.movieInformation", b =>
                {
                    b.Navigation("movieCommentDetail");

                    b.Navigation("movieGenreInformation");

                    b.Navigation("movieSchedule");

                    b.Navigation("movieVisualFormatDetail");
                });

            modelBuilder.Entity("backend.Model.Movie.movieSchedule", b =>
                {
                    b.Navigation("orderDetailTicket");
                });

            modelBuilder.Entity("backend.Model.Movie.movieVisualFormat", b =>
                {
                    b.Navigation("cinemaRoom");

                    b.Navigation("movieSchedule");

                    b.Navigation("movieVisualFormatDetail");

                    b.Navigation("priceInformation");
                });

            modelBuilder.Entity("backend.Model.Price.PriceInformation", b =>
                {
                    b.Navigation("priceInformationForEachUserFilmType");
                });

            modelBuilder.Entity("backend.Model.Price.userType", b =>
                {
                    b.Navigation("priceInformation");
                });

            modelBuilder.Entity("backend.Model.ScheduleList.HourSchedule", b =>
                {
                    b.Navigation("movieSchedule");
                });

            modelBuilder.Entity("backend.Model.Staff_Customer.Customer", b =>
                {
                    b.Navigation("Order");

                    b.Navigation("movieCommentDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
